<!DOCTYPE html>
<link rel="stylesheet" href="https://fonts.xz.style/serve/inter.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@exampledev/new.css@1.1.2/new.min.css">
<style>
    code[class*=language-], pre[class*=language-] {
        color: #f8f8f2;
        background: 0 0;
        text-shadow: 0 1px rgba(0, 0, 0, .3);
        font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
        font-size: 0.85em;
        text-align: left;
        white-space: pre;
        word-spacing: normal;
        word-break: normal;
        word-wrap: normal;
        line-height: 1.5;
        -moz-tab-size: 4;
        -o-tab-size: 4;
        tab-size: 4;
        -webkit-hyphens: none;
        -moz-hyphens: none;
        -ms-hyphens: none;
        hyphens: none
    }

    pre[class*=language-] {
        padding: 1em;
        margin: .5em 0;
        overflow: auto;
        border-radius: .3em
    }

    :not(pre) > code[class*=language-], pre[class*=language-] {
        background: #272822
    }

    :not(pre) > code[class*=language-] {
        padding: .1em;
        border-radius: .3em;
        white-space: normal
    }

    .token.cdata, .token.comment, .token.doctype, .token.prolog {
        color: #8292a2
    }

    .token.punctuation {
        color: #f8f8f2
    }

    .token.namespace {
        opacity: .7
    }

    .token.constant, .token.deleted, .token.property, .token.symbol, .token.tag {
        color: #f92672
    }

    .token.boolean, .token.number {
        color: #ae81ff
    }

    .token.attr-name, .token.builtin, .token.char, .token.inserted, .token.selector, .token.string {
        color: #a6e22e
    }

    .language-css .token.string, .style .token.string, .token.entity, .token.operator, .token.url, .token.variable {
        color: #f8f8f2
    }

    .token.atrule, .token.attr-value, .token.class-name, .token.function {
        color: #e6db74
    }

    .token.keyword {
        color: #66d9ef
    }

    .token.important, .token.regex {
        color: #fd971f
    }

    .token.bold, .token.important {
        font-weight: 700
    }

    .token.italic {
        font-style: italic
    }

    .token.entity {
        cursor: help
    }

    pre[class*=language-].line-numbers {
        position: relative;
        padding-left: 3.8em;
        counter-reset: linenumber
    }

    pre[class*=language-].line-numbers > code {
        position: relative;
        white-space: inherit
    }

    .line-numbers .line-numbers-rows {
        position: absolute;
        pointer-events: none;
        top: 0;
        font-size: 100%;
        left: -3.8em;
        width: 3em;
        letter-spacing: -1px;
        border-right: 1px solid #999;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none
    }

    .line-numbers-rows > span {
        display: block;
        counter-increment: linenumber
    }

    .line-numbers-rows > span:before {
        content: counter(linenumber);
        color: #999;
        display: block;
        padding-right: .8em;
        text-align: right
    }
</style>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body style="max-width: 100%">
<header>
    <h1>LocalStack Diagnosis - {{ creation_date }}</h1>
</header>
<h2>Version</h2>
<table>
    {% for section, table_data in diagnosis["version"].items() %}
        <tr>
            <td>{{ section }}</td>
            <td>
                <table>
                    {% for key, value in table_data.items() %}
                        <tr>
                            <td> {{ key }}</td>
                            <td> {{ value }}</td>
                        </tr>
                    {% endfor %}
                </table>
            </td>
        </tr>
    {% endfor %}
</table>
<h2>Common environment configurations</h2>
<h3>HostConfig.Binds</h3>
<table>
    {% for bind in diagnosis["docker-inspect"]["HostConfig"]["Binds"] %}
        <tr>
            <td>{{ bind }}</td>
        </tr>
    {% endfor %}
</table>
<h3>PortBindings</h3>
{% if "PortBindings" in diagnosis["docker-inspect"] %}
    <table>
        <tr>
            <th>Container</th>
            <th>Host</th>
        </tr>
        {% for client, host in diagnosis["docker-inspect"]["PortBindings"].items() %}
            <tr>
                <td>{{ client }}</td>
                <td>{{ host["HostIp"] }}:{{ host["HostPort"] }}</td>
            </tr>
        {% endfor %}
    </table>
{% else %}
    <b>NONE</b>
{% endif %}
<h3>Config.Env</h3>
<table>
    {% for env in diagnosis["docker-inspect"]["Config"]["Env"] %}
        {% set split = env.split("=") %}
        <tr>
            <td>{{ split[0] }}</td>
            <td>{{ split[1] }}</td>
        </tr>
    {% endfor %}
</table>
<h3>NetworkSettings.Networks</h3>
{% for network_key, network_data in diagnosis["docker-inspect"]["NetworkSettings"]["Networks"].items() %}
    <h4>{{ network_key }}</h4>
    <table>
        {% for key, value in network_data.items() %}
            <tr>
                <td>{{ key }}</td>
                <td>{{ value }}</td>
            </tr>
        {% endfor %}
    </table>
{% endfor %}
<h2>Advanced configuration</h2>
<details>
    <summary>Running services</summary>
    <table>
        {% for service, available in diagnosis["services"].items() %}
            <tr>
                <td>{{ service }}</td>
                <td>{{ available }}</td>
            </tr>
        {% endfor %}
    </table>
</details>
<details>
    <summary>Config</summary>
    <table>
        {% for key, value in diagnosis["config"].items() %}
            <tr>
                <td style="min-width: 250px">{{ key }}</td>
                <td>
                    {% if value is mapping %}
                        <table>
                            {% for inner_key, inner_value in value.items() %}
                                <tr>
                                    <td style="min-width: 200px">{{ inner_key }}</td>
                                    <td>{{ inner_value }}</td>
                                </tr>
                            {% endfor %}
                        </table>
                    {% else %}
                        {{ value }}
                    {% endif %}
                </td>
            </tr>
        {% endfor %}
    </table>
</details>
<details>
    <summary>Docker-Inspect</summary>
    <table>
        {% for key, value in diagnosis["docker-inspect"].items() %}
            <tr>
                <td style="min-width: 250px">{{ key }}</td>
                <td>
                    {% if value is mapping %}
                        <table>
                            {% for inner_key, inner_value in value.items() %}
                                <tr>
                                    <td style="min-width: 200px">{{ inner_key }}</td>
                                    <td>{{ inner_value }}</td>
                                </tr>
                            {% endfor %}
                        </table>
                    {% else %}
                        {{ value }}
                    {% endif %}
                </td>
            </tr>
        {% endfor %}
    </table>
</details>
<details>
    <summary>Docker dependent image hashes</summary>
    <table>
        {% for key, value in diagnosis["docker-dependent-image-hashes"].items() %}
            <tr>
                <td>{{ key }}</td>
                <td>{{ value }}</td>
            </tr>
        {% endfor %}
    </table>
</details>
<details>
    <summary>File tree</summary>
    <table>
        {% for key, value in diagnosis["file-tree"].items() %}
            <tr>
                <td>{{ key }}</td>
                <td>
                    <table>
                        {% for item in value %}
                            <tr>
                                <td>
                                    {{ item }}
                                </td>
                            </tr>
                        {% endfor %}
                    </table>
                </td>
            </tr>
        {% endfor %}
    </table>
</details>

<h1>
    Logs
</h1>
<script>
    var _self = "undefined" != typeof window ? window : "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {},
        Prism = function (e) {
            var n = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i, t = 0, r = {}, a = {
                manual: e.Prism && e.Prism.manual,
                disableWorkerMessageHandler: e.Prism && e.Prism.disableWorkerMessageHandler,
                util: {
                    encode: function e(n) {
                        return n instanceof i ? new i(n.type, e(n.content), n.alias) : Array.isArray(n) ? n.map(e) : n.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ")
                    }, type: function (e) {
                        return Object.prototype.toString.call(e).slice(8, -1)
                    }, objId: function (e) {
                        return e.__id || Object.defineProperty(e, "__id", {value: ++t}), e.__id
                    }, clone: function e(n, t) {
                        var r, i;
                        switch (t = t || {}, a.util.type(n)) {
                            case"Object":
                                if (i = a.util.objId(n), t[i]) return t[i];
                                for (var l in r = {}, t[i] = r, n) n.hasOwnProperty(l) && (r[l] = e(n[l], t));
                                return r;
                            case"Array":
                                return i = a.util.objId(n), t[i] ? t[i] : (r = [], t[i] = r, n.forEach((function (n, a) {
                                    r[a] = e(n, t)
                                })), r);
                            default:
                                return n
                        }
                    }, getLanguage: function (e) {
                        for (; e;) {
                            var t = n.exec(e.className);
                            if (t) return t[1].toLowerCase();
                            e = e.parentElement
                        }
                        return "none"
                    }, setLanguage: function (e, t) {
                        e.className = e.className.replace(RegExp(n, "gi"), ""), e.classList.add("language-" + t)
                    }, currentScript: function () {
                        if ("undefined" == typeof document) return null;
                        if ("currentScript" in document) return document.currentScript;
                        try {
                            throw new Error
                        } catch (r) {
                            var e = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r.stack) || [])[1];
                            if (e) {
                                var n = document.getElementsByTagName("script");
                                for (var t in n) if (n[t].src == e) return n[t]
                            }
                            return null
                        }
                    }, isActive: function (e, n, t) {
                        for (var r = "no-" + n; e;) {
                            var a = e.classList;
                            if (a.contains(n)) return !0;
                            if (a.contains(r)) return !1;
                            e = e.parentElement
                        }
                        return !!t
                    }
                },
                languages: {
                    plain: r, plaintext: r, text: r, txt: r, extend: function (e, n) {
                        var t = a.util.clone(a.languages[e]);
                        for (var r in n) t[r] = n[r];
                        return t
                    }, insertBefore: function (e, n, t, r) {
                        var i = (r = r || a.languages)[e], l = {};
                        for (var o in i) if (i.hasOwnProperty(o)) {
                            if (o == n) for (var s in t) t.hasOwnProperty(s) && (l[s] = t[s]);
                            t.hasOwnProperty(o) || (l[o] = i[o])
                        }
                        var u = r[e];
                        return r[e] = l, a.languages.DFS(a.languages, (function (n, t) {
                            t === u && n != e && (this[n] = l)
                        })), l
                    }, DFS: function e(n, t, r, i) {
                        i = i || {};
                        var l = a.util.objId;
                        for (var o in n) if (n.hasOwnProperty(o)) {
                            t.call(n, o, n[o], r || o);
                            var s = n[o], u = a.util.type(s);
                            "Object" !== u || i[l(s)] ? "Array" !== u || i[l(s)] || (i[l(s)] = !0, e(s, t, o, i)) : (i[l(s)] = !0, e(s, t, null, i))
                        }
                    }
                },
                plugins: {},
                highlightAll: function (e, n) {
                    a.highlightAllUnder(document, e, n)
                },
                highlightAllUnder: function (e, n, t) {
                    var r = {
                        callback: t,
                        container: e,
                        selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
                    };
                    a.hooks.run("before-highlightall", r), r.elements = Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)), a.hooks.run("before-all-elements-highlight", r);
                    for (var i, l = 0; i = r.elements[l++];) a.highlightElement(i, !0 === n, r.callback)
                },
                highlightElement: function (n, t, r) {
                    var i = a.util.getLanguage(n), l = a.languages[i];
                    a.util.setLanguage(n, i);
                    var o = n.parentElement;
                    o && "pre" === o.nodeName.toLowerCase() && a.util.setLanguage(o, i);
                    var s = {element: n, language: i, grammar: l, code: n.textContent};

                    function u(e) {
                        s.highlightedCode = e, a.hooks.run("before-insert", s), s.element.innerHTML = s.highlightedCode, a.hooks.run("after-highlight", s), a.hooks.run("complete", s), r && r.call(s.element)
                    }

                    if (a.hooks.run("before-sanity-check", s), (o = s.element.parentElement) && "pre" === o.nodeName.toLowerCase() && !o.hasAttribute("tabindex") && o.setAttribute("tabindex", "0"), !s.code) return a.hooks.run("complete", s), void (r && r.call(s.element));
                    if (a.hooks.run("before-highlight", s), s.grammar) if (t && e.Worker) {
                        var c = new Worker(a.filename);
                        c.onmessage = function (e) {
                            u(e.data)
                        }, c.postMessage(JSON.stringify({language: s.language, code: s.code, immediateClose: !0}))
                    } else u(a.highlight(s.code, s.grammar, s.language)); else u(a.util.encode(s.code))
                },
                highlight: function (e, n, t) {
                    var r = {code: e, grammar: n, language: t};
                    if (a.hooks.run("before-tokenize", r), !r.grammar) throw new Error('The language "' + r.language + '" has no grammar.');
                    return r.tokens = a.tokenize(r.code, r.grammar), a.hooks.run("after-tokenize", r), i.stringify(a.util.encode(r.tokens), r.language)
                },
                tokenize: function (e, n) {
                    var t = n.rest;
                    if (t) {
                        for (var r in t) n[r] = t[r];
                        delete n.rest
                    }
                    var a = new s;
                    return u(a, a.head, e), o(e, a, n, a.head, 0), function (e) {
                        for (var n = [], t = e.head.next; t !== e.tail;) n.push(t.value), t = t.next;
                        return n
                    }(a)
                },
                hooks: {
                    all: {}, add: function (e, n) {
                        var t = a.hooks.all;
                        t[e] = t[e] || [], t[e].push(n)
                    }, run: function (e, n) {
                        var t = a.hooks.all[e];
                        if (t && t.length) for (var r, i = 0; r = t[i++];) r(n)
                    }
                },
                Token: i
            };

            function i(e, n, t, r) {
                this.type = e, this.content = n, this.alias = t, this.length = 0 | (r || "").length
            }

            function l(e, n, t, r) {
                e.lastIndex = n;
                var a = e.exec(t);
                if (a && r && a[1]) {
                    var i = a[1].length;
                    a.index += i, a[0] = a[0].slice(i)
                }
                return a
            }

            function o(e, n, t, r, s, g) {
                for (var f in t) if (t.hasOwnProperty(f) && t[f]) {
                    var h = t[f];
                    h = Array.isArray(h) ? h : [h];
                    for (var d = 0; d < h.length; ++d) {
                        if (g && g.cause == f + "," + d) return;
                        var v = h[d], p = v.inside, m = !!v.lookbehind, y = !!v.greedy, k = v.alias;
                        if (y && !v.pattern.global) {
                            var x = v.pattern.toString().match(/[imsuy]*$/)[0];
                            v.pattern = RegExp(v.pattern.source, x + "g")
                        }
                        for (var b = v.pattern || v, w = r.next, A = s; w !== n.tail && !(g && A >= g.reach); A += w.value.length, w = w.next) {
                            var E = w.value;
                            if (n.length > e.length) return;
                            if (!(E instanceof i)) {
                                var P, L = 1;
                                if (y) {
                                    if (!(P = l(b, A, e, m)) || P.index >= e.length) break;
                                    var S = P.index, O = P.index + P[0].length, j = A;
                                    for (j += w.value.length; S >= j;) j += (w = w.next).value.length;
                                    if (A = j -= w.value.length, w.value instanceof i) continue;
                                    for (var C = w; C !== n.tail && (j < O || "string" == typeof C.value); C = C.next) L++, j += C.value.length;
                                    L--, E = e.slice(A, j), P.index -= A
                                } else if (!(P = l(b, 0, E, m))) continue;
                                S = P.index;
                                var N = P[0], _ = E.slice(0, S), M = E.slice(S + N.length), W = A + E.length;
                                g && W > g.reach && (g.reach = W);
                                var z = w.prev;
                                if (_ && (z = u(n, z, _), A += _.length), c(n, z, L), w = u(n, z, new i(f, p ? a.tokenize(N, p) : N, k, N)), M && u(n, w, M), L > 1) {
                                    var I = {cause: f + "," + d, reach: W};
                                    o(e, n, t, w.prev, A, I), g && I.reach > g.reach && (g.reach = I.reach)
                                }
                            }
                        }
                    }
                }
            }

            function s() {
                var e = {value: null, prev: null, next: null}, n = {value: null, prev: e, next: null};
                e.next = n, this.head = e, this.tail = n, this.length = 0
            }

            function u(e, n, t) {
                var r = n.next, a = {value: t, prev: n, next: r};
                return n.next = a, r.prev = a, e.length++, a
            }

            function c(e, n, t) {
                for (var r = n.next, a = 0; a < t && r !== e.tail; a++) r = r.next;
                n.next = r, r.prev = n, e.length -= a
            }

            if (e.Prism = a, i.stringify = function e(n, t) {
                if ("string" == typeof n) return n;
                if (Array.isArray(n)) {
                    var r = "";
                    return n.forEach((function (n) {
                        r += e(n, t)
                    })), r
                }
                var i = {
                    type: n.type,
                    content: e(n.content, t),
                    tag: "span",
                    classes: ["token", n.type],
                    attributes: {},
                    language: t
                }, l = n.alias;
                l && (Array.isArray(l) ? Array.prototype.push.apply(i.classes, l) : i.classes.push(l)), a.hooks.run("wrap", i);
                var o = "";
                for (var s in i.attributes) o += " " + s + '="' + (i.attributes[s] || "").replace(/"/g, "&quot;") + '"';
                return "<" + i.tag + ' class="' + i.classes.join(" ") + '"' + o + ">" + i.content + "</" + i.tag + ">"
            }, !e.document) return e.addEventListener ? (a.disableWorkerMessageHandler || e.addEventListener("message", (function (n) {
                var t = JSON.parse(n.data), r = t.language, i = t.code, l = t.immediateClose;
                e.postMessage(a.highlight(i, a.languages[r], r)), l && e.close()
            }), !1), a) : a;
            var g = a.util.currentScript();

            function f() {
                a.manual || a.highlightAll()
            }

            if (g && (a.filename = g.src, g.hasAttribute("data-manual") && (a.manual = !0)), !a.manual) {
                var h = document.readyState;
                "loading" === h || "interactive" === h && g && g.defer ? document.addEventListener("DOMContentLoaded", f) : window.requestAnimationFrame ? window.requestAnimationFrame(f) : window.setTimeout(f, 16)
            }
            return a
        }(_self);
    "undefined" != typeof module && module.exports && (module.exports = Prism), "undefined" != typeof global && (global.Prism = Prism);
    Prism.languages.log = {
        string: {pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?![st] | \w)(?:[^'\\\r\n]|\\.)*'/, greedy: !0},
        exception: {
            pattern: /(^|[^\w.])[a-z][\w.]*(?:Error|Exception):.*(?:(?:\r\n?|\n)[ \t]*(?:at[ \t].+|\.{3}.*|Caused by:.*))+(?:(?:\r\n?|\n)[ \t]*\.\.\. .*)?/,
            lookbehind: !0,
            greedy: !0,
            alias: ["javastacktrace", "language-javastacktrace"],
            inside: Prism.languages.javastacktrace || {
                keyword: /\bat\b/,
                function: /[a-z_][\w$]*(?=\()/,
                punctuation: /[.:()]/
            }
        },
        level: [{
            pattern: /\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\b/,
            alias: ["error", "important"]
        }, {
            pattern: /\b(?:WARN|WARNING|WRN)\b/,
            alias: ["warning", "important"]
        }, {
            pattern: /\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\b/,
            alias: ["info", "keyword"]
        }, {
            pattern: /\b(?:DBG|DEBUG|FINE)\b/,
            alias: ["debug", "keyword"]
        }, {pattern: /\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\b/, alias: ["trace", "comment"]}],
        property: {
            pattern: /((?:^|[\]|])[ \t]*)[a-z_](?:[\w-]|\b\/\b)*(?:[. ]\(?\w(?:[\w-]|\b\/\b)*\)?)*:(?=\s)/im,
            lookbehind: !0
        },
        separator: {pattern: /(^|[^-+])-{3,}|={3,}|\*{3,}|- - /m, lookbehind: !0, alias: "comment"},
        url: /\b(?:file|ftp|https?):\/\/[^\s|,;'"]*[^\s|,;'">.]/,
        email: {pattern: /(^|\s)[-\w+.]+@[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)+(?=\s)/, lookbehind: !0, alias: "url"},
        "ip-address": {pattern: /\b(?:\d{1,3}(?:\.\d{1,3}){3})\b/, alias: "constant"},
        "mac-address": {pattern: /\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\b/i, alias: "constant"},
        domain: {
            pattern: /(^|\s)[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)*\.[a-z][a-z0-9-]+(?=\s)/,
            lookbehind: !0,
            alias: "constant"
        },
        uuid: {pattern: /\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/i, alias: "constant"},
        hash: {pattern: /\b(?:[a-f0-9]{32}){1,2}\b/i, alias: "constant"},
        "file-path": {
            pattern: /\b[a-z]:[\\/][^\s|,;:(){}\[\]"']+|(^|[\s:\[\](>|])\.{0,2}\/\w[^\s|,;:(){}\[\]"']*/i,
            lookbehind: !0,
            greedy: !0,
            alias: "string"
        },
        date: {
            pattern: RegExp("\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))|\\b\\d{1,4}[-/ ](?:\\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\\d{2,4}T?\\b|\\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\\s{1,2}\\d{1,2}\\b", "i"),
            alias: "number"
        },
        time: {pattern: /\b\d{1,2}:\d{1,2}:\d{1,2}(?:[.,:]\d+)?(?:\s?[+-]\d{2}:?\d{2}|Z)?\b/, alias: "number"},
        boolean: /\b(?:false|null|true)\b/i,
        number: {
            pattern: /(^|[^.\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\d[\da-f]*(?:\.\d+)*(?:e[+-]?\d+)?[a-z]{0,3}\b)\b(?!\.\w)/i,
            lookbehind: !0
        },
        operator: /[;:?<=>~/@!$%&+\-|^(){}*#]/,
        punctuation: /[\[\].,]/
    };
    !function () {
        if ("undefined" != typeof Prism && "undefined" != typeof document) {
            var e = "line-numbers", n = /\n(?!$)/g, t = Prism.plugins.lineNumbers = {
                getLine: function (n, t) {
                    if ("PRE" === n.tagName && n.classList.contains(e)) {
                        var i = n.querySelector(".line-numbers-rows");
                        if (i) {
                            var r = parseInt(n.getAttribute("data-start"), 10) || 1, s = r + (i.children.length - 1);
                            t < r && (t = r), t > s && (t = s);
                            var l = t - r;
                            return i.children[l]
                        }
                    }
                }, resize: function (e) {
                    r([e])
                }, assumeViewportIndependence: !0
            }, i = void 0;
            window.addEventListener("resize", (function () {
                t.assumeViewportIndependence && i === window.innerWidth || (i = window.innerWidth, r(Array.prototype.slice.call(document.querySelectorAll("pre.line-numbers"))))
            })), Prism.hooks.add("complete", (function (t) {
                if (t.code) {
                    var i = t.element, s = i.parentNode;
                    if (s && /pre/i.test(s.nodeName) && !i.querySelector(".line-numbers-rows") && Prism.util.isActive(i, e)) {
                        i.classList.remove(e), s.classList.add(e);
                        var l, o = t.code.match(n), a = o ? o.length + 1 : 1,
                            u = new Array(a + 1).join("<span></span>");
                        (l = document.createElement("span")).setAttribute("aria-hidden", "true"), l.className = "line-numbers-rows", l.innerHTML = u, s.hasAttribute("data-start") && (s.style.counterReset = "linenumber " + (parseInt(s.getAttribute("data-start"), 10) - 1)), t.element.appendChild(l), r([s]), Prism.hooks.run("line-numbers", t)
                    }
                }
            })), Prism.hooks.add("line-numbers", (function (e) {
                e.plugins = e.plugins || {}, e.plugins.lineNumbers = !0
            }))
        }

        function r(e) {
            if (0 != (e = e.filter((function (e) {
                var n,
                    t = (n = e, n ? window.getComputedStyle ? getComputedStyle(n) : n.currentStyle || null : null)["white-space"];
                return "pre-wrap" === t || "pre-line" === t
            }))).length) {
                var t = e.map((function (e) {
                    var t = e.querySelector("code"), i = e.querySelector(".line-numbers-rows");
                    if (t && i) {
                        var r = e.querySelector(".line-numbers-sizer"), s = t.textContent.split(n);
                        r || ((r = document.createElement("span")).className = "line-numbers-sizer", t.appendChild(r)), r.innerHTML = "0", r.style.display = "block";
                        var l = r.getBoundingClientRect().height;
                        return r.innerHTML = "", {element: e, lines: s, lineHeights: [], oneLinerHeight: l, sizer: r}
                    }
                })).filter(Boolean);
                t.forEach((function (e) {
                    var n = e.sizer, t = e.lines, i = e.lineHeights, r = e.oneLinerHeight;
                    i[t.length - 1] = void 0, t.forEach((function (e, t) {
                        if (e && e.length > 1) {
                            var s = n.appendChild(document.createElement("span"));
                            s.style.display = "block", s.textContent = e
                        } else i[t] = r
                    }))
                })), t.forEach((function (e) {
                    for (var n = e.sizer, t = e.lineHeights, i = 0, r = 0; r < t.length; r++) void 0 === t[r] && (t[r] = n.children[i++].getBoundingClientRect().height)
                })), t.forEach((function (e) {
                    var n = e.sizer, t = e.element.querySelector(".line-numbers-rows");
                    n.style.display = "none", n.innerHTML = "", e.lineHeights.forEach((function (e, n) {
                        t.children[n].style.height = e + "px"
                    }))
                }))
            }
        }
    }();
</script>
<details>
    <summary>Docker Logs</summary>
<pre><code class="language-log">{{ diagnosis["logs"]["docker"] }}</code></pre>
</details>
</body>
</html>
